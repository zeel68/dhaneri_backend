[
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "93490c30-ed09-4ce5-b294-d09509878543",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC001-register a new user",
    "description": "Test the user registration endpoint to ensure it accepts valid user details including name, email, password, and store_id, and returns appropriate success or error responses.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5050\"\nREGISTER_ENDPOINT = \"/api/auth/register\"\nTIMEOUT = 30\n\n# Placeholder for a valid Bearer token for authorization\nBEARER_TOKEN = \"your_valid_bearer_token_here\"\n\ndef test_register_new_user():\n    url = BASE_URL + REGISTER_ENDPOINT\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    # Generate unique email to avoid conflicts\n    unique_email = f\"testuser_{uuid.uuid4().hex[:8]}@example.com\"\n    payload = {\n        \"name\": \"Test User\",\n        \"email\": unique_email,\n        \"phone_number\": \"1234567890\",\n        \"password\": \"StrongPassw0rd!\",\n        \"store_id\": \"store123\"\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    # Validate response status code for success (201 Created or 200 OK)\n    assert response.status_code in (200, 201), f\"Unexpected status code: {response.status_code}, response: {response.text}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate expected fields in response (assuming API returns user info or success message)\n    # Since PRD does not specify response schema, check for common success indicators\n    assert \"id\" in data or \"user\" in data or \"message\" in data, f\"Unexpected response content: {data}\"\n\n    # Additional validation: email in response if present\n    if \"user\" in data and isinstance(data[\"user\"], dict):\n        assert data[\"user\"].get(\"email\") == unique_email, \"Returned email does not match registered email\"\n    elif \"email\" in data:\n        assert data[\"email\"] == unique_email, \"Returned email does not match registered email\"\n\ntest_register_new_user()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 49, in <module>\n  File \"<string>\", line 32, in test_register_new_user\nAssertionError: Unexpected status code: 409, response: {\"statusCode\":409,\"message\":\"User with this email or phone already exists\",\"success\":false}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.101Z",
    "modified": "2025-07-24T06:02:57.510Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "f84bc0fe-0156-48d3-b3e4-bc9ee292d1e7",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC002-login user",
    "description": "Verify the login endpoint accepts valid email and password, returns a JWT token on success, and handles invalid credentials with proper error messages.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5050\"\nLOGIN_ENDPOINT = \"/api/auth/login\"\nREGISTER_ENDPOINT = \"/api/auth/register\"\nDELETE_CUSTOMER_ENDPOINT = \"/api/store-admin/customers/{customerId}\"\n\ndef test_login_user():\n    # Create a user to test login\n    register_url = BASE_URL + REGISTER_ENDPOINT\n    login_url = BASE_URL + LOGIN_ENDPOINT\n\n    # Sample user data for registration and login\n    user_data = {\n        \"name\": \"Test User\",\n        \"email\": \"testuser_login@example.com\",\n        \"phone_number\": \"1234567890\",\n        \"password\": \"TestPass123!\",\n        \"store_id\": \"test_store_001\"\n    }\n\n    # Register user first\n    try:\n        reg_response = requests.post(register_url, json=user_data, timeout=30)\n        if reg_response.status_code == 409:\n            # User already exists, proceed with login\n            pass\n        else:\n            assert reg_response.status_code == 201 or reg_response.status_code == 200, f\"User registration failed: {reg_response.text}\"\n\n        # Test successful login\n        login_payload = {\n            \"email\": user_data[\"email\"],\n            \"password\": user_data[\"password\"]\n        }\n        login_response = requests.post(login_url, json=login_payload, timeout=30)\n        assert login_response.status_code == 200, f\"Login failed with valid credentials: {login_response.text}\"\n        login_json = login_response.json()\n        assert \"token\" in login_json or \"accessToken\" in login_json or \"jwt\" in login_json, \"JWT token not found in login response\"\n\n        # Test login with invalid password\n        invalid_login_payload = {\n            \"email\": user_data[\"email\"],\n            \"password\": \"WrongPassword123!\"\n        }\n        invalid_login_response = requests.post(login_url, json=invalid_login_payload, timeout=30)\n        assert invalid_login_response.status_code == 401 or invalid_login_response.status_code == 400, \"Invalid login did not return expected error status\"\n        invalid_login_json = invalid_login_response.json()\n        # Check for error message presence\n        assert any(key in invalid_login_json for key in [\"error\", \"message\", \"detail\"]), \"Error message missing for invalid login\"\n\n        # Test login with invalid email\n        invalid_email_payload = {\n            \"email\": \"nonexistent_email@example.com\",\n            \"password\": \"SomePassword123!\"\n        }\n        invalid_email_response = requests.post(login_url, json=invalid_email_payload, timeout=30)\n        assert invalid_email_response.status_code == 401 or invalid_email_response.status_code == 400, \"Invalid email login did not return expected error status\"\n        invalid_email_json = invalid_email_response.json()\n        assert any(key in invalid_email_json for key in [\"error\", \"message\", \"detail\"]), \"Error message missing for invalid email login\"\n\n    finally:\n        # Cleanup: delete the created user if possible (requires auth)\n        # Since no auth token is available for admin, skip deletion or implement if admin token available\n        pass\n\ntest_login_user()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 67, in <module>\n  File \"<string>\", line 37, in test_login_user\nAssertionError: Login failed with valid credentials: {\"statusCode\":404,\"data\":{},\"message\":\"User not found\",\"success\":false}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.107Z",
    "modified": "2025-07-24T06:03:03.462Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "9e84e4e9-4b1d-4a5a-a1b0-167c3c682184",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC003-refresh jwt access token",
    "description": "Test the refresh token endpoint to ensure it issues a new JWT access token when provided with a valid refresh token, and rejects invalid or expired tokens.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5050\"\nTIMEOUT = 30\n\ndef test_refresh_jwt_access_token():\n    # First, login to get valid access and refresh tokens\n    login_url = f\"{BASE_URL}/api/auth/login\"\n    login_payload = {\n        \"email\": \"testuser@example.com\",\n        \"password\": \"TestPassword123!\"\n    }\n    try:\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_data = login_resp.json()\n        assert \"accessToken\" in login_data and \"refreshToken\" in login_data, \"Tokens missing in login response\"\n        valid_refresh_token = login_data[\"refreshToken\"]\n    except Exception as e:\n        raise AssertionError(f\"Login step failed: {e}\")\n\n    refresh_url = f\"{BASE_URL}/api/auth/refresh-token\"\n    headers = {\"Authorization\": f\"Bearer {valid_refresh_token}\"}\n\n    # Test with valid refresh token\n    try:\n        refresh_resp = requests.post(refresh_url, headers=headers, timeout=TIMEOUT)\n        assert refresh_resp.status_code == 200, f\"Refresh token request failed: {refresh_resp.text}\"\n        refresh_data = refresh_resp.json()\n        assert \"accessToken\" in refresh_data, \"New access token not returned\"\n        new_access_token = refresh_data[\"accessToken\"]\n        assert isinstance(new_access_token, str) and len(new_access_token) > 0, \"Invalid new access token\"\n    except Exception as e:\n        raise AssertionError(f\"Valid refresh token test failed: {e}\")\n\n    # Test with invalid refresh token\n    invalid_headers = {\"Authorization\": \"Bearer invalid_or_expired_token\"}\n    try:\n        invalid_resp = requests.post(refresh_url, headers=invalid_headers, timeout=TIMEOUT)\n        assert invalid_resp.status_code in (401, 403), f\"Invalid token should be rejected, got {invalid_resp.status_code}\"\n        error_data = invalid_resp.json()\n        assert \"error\" in error_data or \"message\" in error_data, \"Error message missing for invalid token\"\n    except Exception as e:\n        raise AssertionError(f\"Invalid refresh token test failed: {e}\")\n\ntest_refresh_jwt_access_token()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 15, in test_refresh_jwt_access_token\nAssertionError: Login failed: {\"statusCode\":404,\"data\":{},\"message\":\"User not found\",\"success\":false}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 46, in <module>\n  File \"<string>\", line 20, in test_refresh_jwt_access_token\nAssertionError: Login step failed: Login failed: {\"statusCode\":404,\"data\":{},\"message\":\"User not found\",\"success\":false}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.113Z",
    "modified": "2025-07-24T06:02:32.471Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "edb64ffb-9dd1-46d8-9b9f-26ae290b5d10",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC004-verify user email",
    "description": "Validate the email verification endpoint by submitting correct and incorrect OTP codes for a given email and checking for appropriate success or failure responses.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5050\"\nREGISTER_ENDPOINT = \"/api/auth/register\"\nLOGIN_ENDPOINT = \"/api/auth/login\"\nVERIFY_EMAIL_ENDPOINT = \"/api/auth/verify-email\"\nRESEND_VERIFICATION_ENDPOINT = \"/api/auth/resend-verification\"\nHEADERS_JSON = {\"Content-Type\": \"application/json\"}\nTIMEOUT = 30\n\ndef test_verify_user_email():\n    unique_email = f\"testuser_{uuid.uuid4().hex[:8]}@example.com\"\n    password = \"TestPass123!\"\n    name = \"Test User\"\n    store_id = \"test_store_id_123\"\n\n    # Step 1: Register new user without phone_number\n    register_payload = {\n        \"name\": name,\n        \"email\": unique_email,\n        \"password\": password,\n        \"store_id\": store_id\n    }\n    try:\n        reg_resp = requests.post(\n            BASE_URL + REGISTER_ENDPOINT,\n            json=register_payload,\n            headers=HEADERS_JSON,\n            timeout=TIMEOUT\n        )\n        assert reg_resp.status_code == 201 or reg_resp.status_code == 200, f\"Registration failed: {reg_resp.text}\"\n    except Exception as e:\n        raise AssertionError(f\"User registration request failed: {e}\")\n\n    # Step 2: Login to get JWT token\n    login_payload = {\n        \"email\": unique_email,\n        \"password\": password\n    }\n    try:\n        login_resp = requests.post(\n            BASE_URL + LOGIN_ENDPOINT,\n            json=login_payload,\n            headers=HEADERS_JSON,\n            timeout=TIMEOUT\n        )\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_data = login_resp.json()\n        token = login_data.get(\"token\") or login_data.get(\"accessToken\") or login_data.get(\"jwt\") or login_data.get(\"access_token\")\n        assert token, \"JWT token not found in login response\"\n    except Exception as e:\n        raise AssertionError(f\"User login request failed: {e}\")\n\n    # Step 3: Attempt to verify email with incorrect OTP without Authorization header (not required by PRD)\n    incorrect_otp_payload = {\n        \"email\": unique_email,\n        \"otp\": \"000000\"\n    }\n    try:\n        incorrect_resp = requests.post(\n            BASE_URL + VERIFY_EMAIL_ENDPOINT,\n            json=incorrect_otp_payload,\n            headers=HEADERS_JSON,\n            timeout=TIMEOUT\n        )\n        assert incorrect_resp.status_code in (400, 401, 422), f\"Expected failure status for incorrect OTP, got {incorrect_resp.status_code}\"\n        err_json = incorrect_resp.json()\n        assert \"error\" in err_json or \"message\" in err_json, \"Error message not found in response for incorrect OTP\"\n    except Exception as e:\n        raise AssertionError(f\"Verify email with incorrect OTP request failed: {e}\")\n\n    # Step 4: Resend verification OTP without auth header\n    try:\n        resend_resp = requests.post(\n            BASE_URL + RESEND_VERIFICATION_ENDPOINT,\n            json={\"email\": unique_email},\n            headers=HEADERS_JSON,\n            timeout=TIMEOUT\n        )\n        assert resend_resp.status_code in (200, 202, 204), f\"Resend verification failed: {resend_resp.text}\"\n    except Exception as e:\n        raise AssertionError(f\"Resend verification request failed: {e}\")\n\n    # Step 5: Test correct OTP with placeholder\n    correct_otp_payload = {\n        \"email\": unique_email,\n        \"otp\": \"123456\"\n    }\n    try:\n        correct_resp = requests.post(\n            BASE_URL + VERIFY_EMAIL_ENDPOINT,\n            json=correct_otp_payload,\n            headers=HEADERS_JSON,\n            timeout=TIMEOUT\n        )\n        if correct_resp.status_code == 200:\n            resp_json = correct_resp.json()\n            assert \"success\" in resp_json or \"message\" in resp_json, \"Success message missing in correct OTP response\"\n        else:\n            assert correct_resp.status_code in (400, 401, 422), f\"Unexpected status code for correct OTP test: {correct_resp.status_code}\"\n            err_json = correct_resp.json()\n            assert \"error\" in err_json or \"message\" in err_json, \"Error message missing in incorrect OTP response\"\n    except Exception as e:\n        raise AssertionError(f\"Verify email with correct OTP request failed: {e}\")\n\ntest_verify_user_email()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 32, in test_verify_user_email\nAssertionError: Registration failed: {\"statusCode\":400,\"message\":\"All fields are required for local registration\",\"success\":false}\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 107, in <module>\n  File \"<string>\", line 34, in test_verify_user_email\nAssertionError: User registration request failed: Registration failed: {\"statusCode\":400,\"message\":\"All fields are required for local registration\",\"success\":false}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.119Z",
    "modified": "2025-07-24T06:03:34.308Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "f8b49673-5156-46a9-ba47-63fd2e6017de",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC005-resend email verification",
    "description": "Test the resend verification endpoint to confirm it triggers a new verification email to the user and handles cases where the email is already verified or invalid.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5050\"\nREGISTER_ENDPOINT = f\"{BASE_URL}/api/auth/register\"\nLOGIN_ENDPOINT = f\"{BASE_URL}/api/auth/login\"\nRESEND_VERIFICATION_ENDPOINT = f\"{BASE_URL}/api/auth/resend-verification\"\n\nTIMEOUT = 30\n\ndef test_resend_email_verification():\n    # Generate unique user data\n    unique_email = f\"testuser_{uuid.uuid4().hex[:8]}@example.com\"\n    user_password = \"TestPass123!\"\n    user_name = \"Test User\"\n    user_store_id = \"store123\"  # Assuming a dummy store_id; adjust if needed\n    user_phone_number = \"1234567890\"  # Added phone_number as string\n\n    headers = {\"Content-Type\": \"application/json\"}\n\n    # Register user\n    register_payload = {\n        \"name\": user_name,\n        \"email\": unique_email,\n        \"phone_number\": user_phone_number,\n        \"password\": user_password,\n        \"store_id\": user_store_id\n    }\n    reg_resp = requests.post(REGISTER_ENDPOINT, json=register_payload, headers=headers, timeout=TIMEOUT)\n    assert reg_resp.status_code in [201, 200, 409], f\"User registration failed: {reg_resp.text}\"\n\n    # Login user to get JWT token\n    login_payload = {\n        \"email\": unique_email,\n        \"password\": user_password\n    }\n    login_resp = requests.post(LOGIN_ENDPOINT, json=login_payload, headers=headers, timeout=TIMEOUT)\n    assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n    login_data = login_resp.json()\n    assert \"token\" in login_data or \"accessToken\" in login_data, \"JWT token not found in login response\"\n    token = login_data.get(\"token\") or login_data.get(\"accessToken\")\n\n    # Resend verification does not require auth, so do not send Authorization header\n    resend_payload = {\"email\": unique_email}\n    resend_resp = requests.post(RESEND_VERIFICATION_ENDPOINT, json=resend_payload, headers=headers, timeout=TIMEOUT)\n    assert resend_resp.status_code == 200, f\"Resend verification failed for unverified user: {resend_resp.text}\"\n    resend_data = resend_resp.json()\n    assert \"message\" in resend_data, \"No message in resend verification response\"\n\n    # 2) Resend verification again expecting 200 or error with message\n    resend_resp2 = requests.post(RESEND_VERIFICATION_ENDPOINT, json=resend_payload, headers=headers, timeout=TIMEOUT)\n    assert resend_resp2.status_code in [200, 400, 409], f\"Unexpected status code on resend for verified user: {resend_resp2.status_code}\"\n    resend_data2 = resend_resp2.json()\n    assert \"message\" in resend_data2, \"No message in resend verification response for verified user\"\n\n    # 3) Resend verification with invalid email (should fail)\n    invalid_email_payload = {\"email\": \"invalid-email-format\"}\n    resend_invalid_resp = requests.post(RESEND_VERIFICATION_ENDPOINT, json=invalid_email_payload, headers=headers, timeout=TIMEOUT)\n    assert resend_invalid_resp.status_code in [400, 422], f\"Invalid email resend did not fail as expected: {resend_invalid_resp.status_code}\"\n    invalid_resp_data = resend_invalid_resp.json()\n    assert \"error\" in invalid_resp_data or \"message\" in invalid_resp_data, \"No error message for invalid email resend\"\n\n\ntest_resend_email_verification()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 64, in <module>\n  File \"<string>\", line 38, in test_resend_email_verification\nAssertionError: Login failed: {\"statusCode\":404,\"data\":{},\"message\":\"User not found\",\"success\":false}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.129Z",
    "modified": "2025-07-24T06:03:11.007Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "e284b478-6861-4c16-b6a6-310911f05e89",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC006-request password reset",
    "description": "Verify the forgot password endpoint accepts a valid email and initiates the password reset process, including sending an OTP or reset link.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:5050\"\nFORGOT_PASSWORD_ENDPOINT = \"/api/auth/forgot-password\"\n\n\ndef test_request_password_reset():\n    url = BASE_URL + FORGOT_PASSWORD_ENDPOINT\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    payload = {\n        \"email\": \"testuser@example.com\"\n    }\n\n    try:\n        response = requests.post(url, json=payload, headers=headers, timeout=30)\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    assert response.status_code == 200, f\"Unexpected status code: {response.status_code}\"\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert \"message\" in data or \"success\" in data, \"Response JSON missing expected keys\"\n    if \"success\" in data:\n        assert data[\"success\"] is True, \"Password reset success flag is not True\"\n    if \"message\" in data:\n        assert isinstance(data[\"message\"], str) and len(data[\"message\"]) > 0, \"Message is empty or not a string\"\n\n\ntest_request_password_reset()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 34, in <module>\n  File \"<string>\", line 21, in test_request_password_reset\nAssertionError: Unexpected status code: 404\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.135Z",
    "modified": "2025-07-24T06:02:45.168Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "6ac93b9a-4a1d-43f4-9282-418d82146c04",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC007-reset password",
    "description": "Test the reset password endpoint by submitting valid email, OTP, and new password, ensuring the password is updated and invalid inputs are handled properly.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5050\"\nRESET_PASSWORD_ENDPOINT = \"/api/auth/reset-password\"\nFORGOT_PASSWORD_ENDPOINT = \"/api/auth/forgot-password\"\nREGISTER_ENDPOINT = \"/api/auth/register\"\nVERIFY_EMAIL_ENDPOINT = \"/api/auth/verify-email\"\nLOGIN_ENDPOINT = \"/api/auth/login\"\nDELETE_USER_ENDPOINT = \"/api/store-admin/customers/{customerId}\"  # Not used here but placeholder if needed\n\nTIMEOUT = 30\n\n# Placeholder token for Bearer auth; in real scenario, replace with valid token\nBEARER_TOKEN = \"your_valid_bearer_token_here\"\n\nheaders = {\n    \"Authorization\": f\"Bearer {BEARER_TOKEN}\",\n    \"Content-Type\": \"application/json\"\n}\n\ndef test_reset_password():\n    # Step 1: Register a new user to test reset password flow\n    unique_suffix = uuid.uuid4().hex[:8]\n    test_email = f\"testuser_{unique_suffix}@example.com\"\n    test_password = \"InitialPass123!\"\n    store_id = \"test_store_id\"  # Assuming a dummy store_id; adjust if needed\n    test_phone_number = f\"123456{unique_suffix}\"\n    register_payload = {\n        \"name\": \"Test User\",\n        \"email\": test_email,\n        \"phone_number\": test_phone_number,\n        \"password\": test_password,\n        \"store_id\": store_id\n    }\n\n    # Register user\n    try:\n        reg_resp = requests.post(\n            BASE_URL + REGISTER_ENDPOINT,\n            json=register_payload,\n            timeout=TIMEOUT\n        )\n        assert reg_resp.status_code == 201 or reg_resp.status_code == 200, f\"User registration failed: {reg_resp.text}\"\n\n        # Step 2: Simulate forgot password to get OTP (assuming OTP is sent via email, here we simulate by requesting)\n        forgot_payload = {\"email\": test_email}\n        forgot_resp = requests.post(\n            BASE_URL + FORGOT_PASSWORD_ENDPOINT,\n            json=forgot_payload,\n            timeout=TIMEOUT\n        )\n        assert forgot_resp.status_code == 200, f\"Forgot password request failed: {forgot_resp.text}\"\n\n        # For testing, we need OTP. Since no direct API to get OTP, assume OTP is \"123456\" for test or fetched from response\n        # If OTP is returned in response (not specified), extract it; else use dummy OTP for test\n        otp = None\n        try:\n            otp = forgot_resp.json().get(\"otp\")\n        except Exception:\n            otp = None\n        if not otp:\n            otp = \"123456\"  # fallback dummy OTP for testing\n\n        # Step 3: Reset password with valid email, OTP, and new password\n        new_password = \"NewPass123!\"\n        reset_payload = {\n            \"email\": test_email,\n            \"otp\": otp,\n            \"newPassword\": new_password\n        }\n        # Remove Authorization header for reset password request as per PRD (no JWT required)\n        reset_resp = requests.post(\n            BASE_URL + RESET_PASSWORD_ENDPOINT,\n            json=reset_payload,\n            headers={\"Content-Type\": \"application/json\"},\n            timeout=TIMEOUT\n        )\n        assert reset_resp.status_code == 200, f\"Reset password failed with valid data: {reset_resp.text}\"\n\n        # Step 4: Verify password was updated by logging in with new password\n        login_payload = {\n            \"email\": test_email,\n            \"password\": new_password\n        }\n        login_resp = requests.post(\n            BASE_URL + LOGIN_ENDPOINT,\n            json=login_payload,\n            timeout=TIMEOUT\n        )\n        assert login_resp.status_code == 200, f\"Login with new password failed: {login_resp.text}\"\n        login_json = login_resp.json()\n        assert \"token\" in login_json or \"accessToken\" in login_json, \"Login response missing token\"\n\n        # Step 5: Test reset password with invalid inputs and expect errors\n\n        # Invalid email format\n        invalid_email_payload = {\n            \"email\": \"invalid-email-format\",\n            \"otp\": otp,\n            \"newPassword\": new_password\n        }\n        invalid_email_resp = requests.post(\n            BASE_URL + RESET_PASSWORD_ENDPOINT,\n            json=invalid_email_payload,\n            headers={\"Content-Type\": \"application/json\"},\n            timeout=TIMEOUT\n        )\n        assert invalid_email_resp.status_code >= 400, \"Reset password accepted invalid email format\"\n\n        # Missing OTP\n        missing_otp_payload = {\n            \"email\": test_email,\n            \"newPassword\": new_password\n        }\n        missing_otp_resp = requests.post(\n            BASE_URL + RESET_PASSWORD_ENDPOINT,\n            json=missing_otp_payload,\n            headers={\"Content-Type\": \"application/json\"},\n            timeout=TIMEOUT\n        )\n        assert missing_otp_resp.status_code >= 400, \"Reset password accepted missing OTP\"\n\n        # Invalid OTP\n        invalid_otp_payload = {\n            \"email\": test_email,\n            \"otp\": \"000000\",\n            \"newPassword\": new_password\n        }\n        invalid_otp_resp = requests.post(\n            BASE_URL + RESET_PASSWORD_ENDPOINT,\n            json=invalid_otp_payload,\n            headers={\"Content-Type\": \"application/json\"},\n            timeout=TIMEOUT\n        )\n        assert invalid_otp_resp.status_code >= 400, \"Reset password accepted invalid OTP\"\n\n        # Missing newPassword\n        missing_password_payload = {\n            \"email\": test_email,\n            \"otp\": otp\n        }\n        missing_password_resp = requests.post(\n            BASE_URL + RESET_PASSWORD_ENDPOINT,\n            json=missing_password_payload,\n            headers={\"Content-Type\": \"application/json\"},\n            timeout=TIMEOUT\n        )\n        assert missing_password_resp.status_code >= 400, \"Reset password accepted missing newPassword\"\n\n    finally:\n        # Cleanup: If there was a user deletion endpoint and we had userId, we could delete the user here.\n        # Since no userId or delete user API is specified for this test, skipping cleanup.\n        pass\n\ntest_reset_password()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 156, in <module>\n  File \"<string>\", line 44, in test_reset_password\nAssertionError: User registration failed: {\"error\":\"Something went wrong\"}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.142Z",
    "modified": "2025-07-24T06:03:34.315Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "74e69c02-0caa-44fd-9e14-b4d397fddee4",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC008-logout user with jwt",
    "description": "Ensure the logout endpoint invalidates the user's JWT session token and requires valid authentication to access.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5050\"\nREGISTER_URL = f\"{BASE_URL}/api/auth/register\"\nLOGIN_URL = f\"{BASE_URL}/api/auth/login\"\nLOGOUT_URL = f\"{BASE_URL}/api/auth/logout\"\nME_URL = f\"{BASE_URL}/api/auth/me\"\n\nTIMEOUT = 30\n\n\ndef test_logout_user_with_jwt():\n    # Generate unique user data for registration\n    unique_id = str(uuid.uuid4())\n    user_data = {\n        \"name\": \"Test User\",\n        \"email\": f\"testuser_{unique_id}@example.com\",\n        \"password\": \"TestPass123!\",\n        \"store_id\": \"test_store_001\"\n    }\n\n    headers = {\"Content-Type\": \"application/json\"}\n\n    # Register user\n    try:\n        reg_resp = requests.post(REGISTER_URL, json=user_data, headers=headers, timeout=TIMEOUT)\n        assert reg_resp.status_code == 201 or reg_resp.status_code == 200, f\"Registration failed: {reg_resp.text}\"\n\n        # Login user to get JWT token\n        login_payload = {\n            \"email\": user_data[\"email\"],\n            \"password\": user_data[\"password\"]\n        }\n        login_resp = requests.post(LOGIN_URL, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_json = login_resp.json()\n        token = login_json.get(\"token\") or login_json.get(\"accessToken\") or login_json.get(\"jwt\")\n        assert token, \"JWT token not found in login response\"\n\n        auth_headers = {\n            \"Authorization\": f\"Bearer {token}\"\n        }\n\n        # Access a protected endpoint to verify token is valid before logout\n        me_resp = requests.get(ME_URL, headers=auth_headers, timeout=TIMEOUT)\n        assert me_resp.status_code == 200, f\"Accessing protected endpoint failed before logout: {me_resp.text}\"\n\n        # Logout user\n        logout_resp = requests.post(LOGOUT_URL, headers=auth_headers, timeout=TIMEOUT)\n        assert logout_resp.status_code == 200 or logout_resp.status_code == 204, f\"Logout failed: {logout_resp.text}\"\n\n        # Access protected endpoint after logout should fail (token invalidated)\n        me_resp_after_logout = requests.get(ME_URL, headers=auth_headers, timeout=TIMEOUT)\n        assert me_resp_after_logout.status_code == 401 or me_resp_after_logout.status_code == 403, \\\n            f\"Token still valid after logout: {me_resp_after_logout.text}\"\n\n    finally:\n        # Cleanup: delete the created user if API supports it (not specified in PRD)\n        # Since no delete user endpoint is specified, no cleanup is done here.\n        pass\n\n\ntest_logout_user_with_jwt()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 64, in <module>\n  File \"<string>\", line 28, in test_logout_user_with_jwt\nAssertionError: Registration failed: {\"statusCode\":400,\"message\":\"All fields are required for local registration\",\"success\":false}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.148Z",
    "modified": "2025-07-24T06:03:20.716Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "0d20ce9d-3bf0-4f42-a4d4-610f97085477",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC009-change password with jwt",
    "description": "Test the change password endpoint for authenticated users, verifying that the password is updated correctly and invalid inputs are rejected.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5050\"\nREGISTER_URL = f\"{BASE_URL}/api/auth/register\"\nLOGIN_URL = f\"{BASE_URL}/api/auth/login\"\nCHANGE_PASSWORD_URL = f\"{BASE_URL}/api/auth/change-password\"\nDELETE_USER_URL = f\"{BASE_URL}/api/store-admin/customers\"  # No direct delete user endpoint in auth, so will skip delete user cleanup\n\nTIMEOUT = 30\n\ndef test_change_password_with_jwt():\n    # Generate unique user data\n    unique_suffix = str(uuid.uuid4())\n    user_email = f\"testuser_{unique_suffix}@example.com\"\n    user_password = \"InitialPass123!\"\n    new_password = \"NewPass456!\"\n    user_name = \"Test User\"\n    store_id = \"test-store-id\"  # Assuming a dummy store_id; adjust if needed\n\n    headers = {\"Content-Type\": \"application/json\"}\n\n    # Register user\n    register_payload = {\n        \"name\": user_name,\n        \"email\": user_email,\n        \"password\": user_password,\n        \"store_id\": store_id\n    }\n\n    try:\n        reg_resp = requests.post(REGISTER_URL, json=register_payload, headers=headers, timeout=TIMEOUT)\n        assert reg_resp.status_code == 201 or reg_resp.status_code == 200, f\"Registration failed: {reg_resp.text}\"\n\n        # Login user to get JWT token\n        login_payload = {\n            \"email\": user_email,\n            \"password\": user_password\n        }\n        login_resp = requests.post(LOGIN_URL, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_data = login_resp.json()\n        assert \"token\" in login_data or \"accessToken\" in login_data, \"JWT token not found in login response\"\n        token = login_data.get(\"token\") or login_data.get(\"accessToken\")\n        auth_headers = {\n            \"Authorization\": f\"Bearer {token}\",\n            \"Content-Type\": \"application/json\"\n        }\n\n        # 1) Test successful password change\n        change_password_payload = {\n            \"currentPassword\": user_password,\n            \"newPassword\": new_password\n        }\n\n        resp = requests.post(CHANGE_PASSWORD_URL, json=change_password_payload, headers=auth_headers, timeout=TIMEOUT)\n        assert resp.status_code == 200, f\"Change password failed: {resp.text}\"\n\n        # Verify login with new password works\n        login_payload_new = {\n            \"email\": user_email,\n            \"password\": new_password\n        }\n        login_resp_new = requests.post(LOGIN_URL, json=login_payload_new, headers=headers, timeout=TIMEOUT)\n        assert login_resp_new.status_code == 200, f\"Login with new password failed: {login_resp_new.text}\"\n\n        # 2) Test change password with invalid current password\n        invalid_payload = {\n            \"currentPassword\": \"WrongPassword123!\",\n            \"newPassword\": \"AnotherPass789!\"\n        }\n        resp_invalid = requests.post(CHANGE_PASSWORD_URL, json=invalid_payload, headers=auth_headers, timeout=TIMEOUT)\n        assert resp_invalid.status_code == 400 or resp_invalid.status_code == 401, \"Invalid current password should be rejected\"\n\n        # 3) Test change password with invalid new password (e.g., too short)\n        invalid_new_pass_payload = {\n            \"currentPassword\": new_password,\n            \"newPassword\": \"123\"\n        }\n        resp_invalid_new = requests.post(CHANGE_PASSWORD_URL, json=invalid_new_pass_payload, headers=auth_headers, timeout=TIMEOUT)\n        assert resp_invalid_new.status_code == 400, \"Invalid new password should be rejected\"\n\n        # 4) Test change password without authentication\n        resp_no_auth = requests.post(CHANGE_PASSWORD_URL, json=change_password_payload, headers={\"Content-Type\": \"application/json\"}, timeout=TIMEOUT)\n        assert resp_no_auth.status_code == 401 or resp_no_auth.status_code == 403, \"Change password without auth should be denied\"\n\n    finally:\n        # Cleanup: No direct delete user endpoint in auth API.\n        # If user deletion is possible via store-admin customers or other means, implement here.\n        # Otherwise, user remains in system.\n        pass\n\ntest_change_password_with_jwt()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 93, in <module>\n  File \"<string>\", line 33, in test_change_password_with_jwt\nAssertionError: Registration failed: {\"statusCode\":400,\"message\":\"All fields are required for local registration\",\"success\":false}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.154Z",
    "modified": "2025-07-24T06:03:51.305Z"
  },
  {
    "projectId": "afddb03e-dd5b-4564-8d5c-3796e69fe6e8",
    "testId": "44807653-4286-4908-9fbc-1b34ebb6d1e7",
    "userId": "d4d89488-d051-70b9-8911-edc711ad67c6",
    "title": "TC010-get current user profile with jwt",
    "description": "Verify the get current user profile endpoint returns accurate user information for authenticated requests and denies access without valid JWT.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:5050\"\nREGISTER_URL = f\"{BASE_URL}/api/auth/register\"\nLOGIN_URL = f\"{BASE_URL}/api/auth/login\"\nME_URL = f\"{BASE_URL}/api/auth/me\"\nLOGOUT_URL = f\"{BASE_URL}/api/auth/logout\"\n\nTIMEOUT = 30\n\ndef test_get_current_user_profile_with_jwt():\n    # Generate unique user data for registration\n    unique_suffix = str(uuid.uuid4())\n    user_data = {\n        \"name\": \"Test User\",\n        \"email\": f\"testuser_{unique_suffix}@example.com\",\n        \"phone_number\": \"1234567890\",\n        \"password\": \"TestPass123!\",\n        \"store_id\": \"store123\"\n    }\n\n    headers = {\"Content-Type\": \"application/json\"}\n\n    # Register user\n    register_resp = requests.post(REGISTER_URL, json=user_data, headers=headers, timeout=TIMEOUT)\n    assert register_resp.status_code == 201 or register_resp.status_code == 200, f\"User registration failed: {register_resp.text}\"\n\n    try:\n        # Login user to get JWT token\n        login_payload = {\n            \"email\": user_data[\"email\"],\n            \"password\": user_data[\"password\"]\n        }\n        login_resp = requests.post(LOGIN_URL, json=login_payload, headers=headers, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_json = login_resp.json()\n        assert \"token\" in login_json or \"accessToken\" in login_json, \"JWT token not found in login response\"\n        token = login_json.get(\"token\") or login_json.get(\"accessToken\")\n        auth_headers = {\n            \"Authorization\": f\"Bearer {token}\"\n        }\n\n        # Access /api/auth/me with valid JWT\n        me_resp = requests.get(ME_URL, headers=auth_headers, timeout=TIMEOUT)\n        assert me_resp.status_code == 200, f\"Failed to get user profile with valid JWT: {me_resp.text}\"\n        me_json = me_resp.json()\n        # Validate returned user info matches registered user (at least email and name)\n        assert me_json.get(\"email\") == user_data[\"email\"], \"Returned email does not match registered email\"\n        assert me_json.get(\"name\") == user_data[\"name\"], \"Returned name does not match registered name\"\n\n        # Access /api/auth/me without JWT (no Authorization header)\n        no_auth_resp = requests.get(ME_URL, timeout=TIMEOUT)\n        assert no_auth_resp.status_code == 401 or no_auth_resp.status_code == 403, \"Access without JWT should be denied\"\n\n        # Access /api/auth/me with invalid JWT\n        invalid_auth_headers = {\n            \"Authorization\": \"Bearer invalidtoken123\"\n        }\n        invalid_auth_resp = requests.get(ME_URL, headers=invalid_auth_headers, timeout=TIMEOUT)\n        assert invalid_auth_resp.status_code == 401 or invalid_auth_resp.status_code == 403, \"Access with invalid JWT should be denied\"\n\n    finally:\n        # Logout user to invalidate token (best effort)\n        try:\n            if 'token' in locals():\n                logout_resp = requests.post(LOGOUT_URL, headers=auth_headers, timeout=TIMEOUT)\n                # Logout might return 200 or 204 or 401 if token already invalid\n                assert logout_resp.status_code in [200, 204, 401], f\"Unexpected logout response: {logout_resp.status_code}\"\n        except Exception:\n            pass\n\ntest_get_current_user_profile_with_jwt()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 73, in <module>\n  File \"<string>\", line 27, in test_get_current_user_profile_with_jwt\nAssertionError: User registration failed: {\"statusCode\":409,\"message\":\"User with this email or phone already exists\",\"success\":false}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-07-24T06:01:50.159Z",
    "modified": "2025-07-24T06:03:33.028Z"
  }
]
